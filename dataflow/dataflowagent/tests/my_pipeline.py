"""
Auto-generated by pipeline_assembler
"""
from dataflow.pipeline import PipelineABC
from dataflow.utils.storage import FileStorage
from dataflow.serving import APILLMServing_request, LocalModelLLMServing_vllm

from dataflow.operators.reasoning.generate.reasoning_answer_generator import ReasoningAnswerGenerator
from dataflow.operators.reasoning.generate.reasoning_question_generator import ReasoningQuestionGenerator


class RecommendPipeline(PipelineABC):
    def __init__(self):
        super().__init__()
        # -------- FileStorage --------
        self.storage = FileStorage(
            first_entry_file_name="/mnt/h_h_public/lh/lz/DataFlow/dataflow/example/DataflowAgent/mq_test_data.jsonl",
            cache_path="./cache_local",
            file_name_prefix="dataflow_cache_step",
            cache_type="jsonl",
        )
        # -------- LLM Serving (Remote) --------
        self.llm_serving = APILLMServing_request(
            api_url="http://123.129.219.111:3000/v1/chat/completions",
            key_name_of_api_key="DF_API_KEY",
            model_name="gpt-4o",
            max_workers=100,
        )

        self.reasoning_answer_generator = ReasoningAnswerGenerator(
            llm_serving=self.llm_serving,
            prompt_template=None,
        )
        self.reasoning_question_generator = ReasoningQuestionGenerator(
            num_prompts=1,
            llm_serving=self.llm_serving,
            prompt_template=None,
        )

    def forward(self):
        # Generate chain-of-thought (CoT) answers based on the existing "question" column.
        self.reasoning_answer_generator.run(
            storage=self.storage.step(),
            input_key="question",
            output_key="generated_cot",
        )

        # Generate reasoning questions using the same "question" column as input.
        self.reasoning_question_generator.run(
            storage=self.storage.step(),
            input_key="question",
            output_synth_or_input_flag="Synth_or_Input",
        )


if __name__ == "__main__":
    pipeline = RecommendPipeline()
    pipeline.compile()
    pipeline.forward()
